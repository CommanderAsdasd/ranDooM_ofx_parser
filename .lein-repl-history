(-ащщ)
(-foo)
(core/-foo)
(randoom-ofx.core/-foo)
(randoom-ofx/-foo)
(use :randoom-ofx.core)
(use :randoom-ofx)
(ns randoom-ofx.core)
(ns :randoom-ofx.core)
(foo)
(-foo)
(ns :randoom-ofx.core)
(ns randoom-ofx.core)
(-foo)
(ns randoom-ofx.core)
(-foo)
(use :randoom-ofx)
(use :randoom-ofx.core)
(use randoom-ofx.core)
(use :randoom-ofx.core)
ls
(ls)
(-foo)
(foo)
(foo [1])
(main [1])
()load-file
(load-file)
(load-file 1)
(load-file)
(use 'randoomofx.core :reload)
(load-file)
(use 'randoomofx.core :reload)
(load-file)
(use 'randoomofx.core :reload)
(load-file)
(dir "./")
(dir './)
(dir './')
(require 'clojure.string 'clojure.repl)
(ns my-file-utils
  (:import java.io.File))
(use 'clojure.java.io)
(-> "/tmp" file .listFiles)
(.listFiles (file "/tmp"))
(println (.listFiles (file "./")))
(def directory (clojure.java.io/file "/path/to/directory"))
(def files (file-seq directory))
(take 10 files)
(def directory (clojure.java.io/file "./"))
(def files (file-seq directory))
(take 10 files)
(load-file)
(use 'randoomofx.core :reload)
(load-json-template)
(use 'randoomofx.core :reload)
(load-json-template)
(use 'randoomofx.core :reload)
(load-json-template)
(use 'randoomofx.core :reload)
(load-json-template)
